# STEP 1: Upload CSV file from your computer
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

# STEP 2: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# STEP 3: Load the uploaded CSV
df = pd.read_csv("DOGE-USD.csv")  # This file name must match the uploaded file

# STEP 4: Use only the 'Close' column and drop missing values
df = df[['Close']]
df = df.dropna()

# STEP 5: Define how many days ahead to predict
future_days = 30

# STEP 6: Create a new column for prediction
df['Prediction'] = df[['Close']].shift(-future_days)

# STEP 7: Prepare the features (X) and labels (y)
X = np.array(df.drop(['Prediction'], axis=1))[:-future_days]
y = np.array(df['Prediction'])[:-future_days]

# STEP 8: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# STEP 9: Create and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# STEP 10: Make predictions on the test set
predictions = model.predict(X_test)
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse:.4f}")

# STEP 11: Predict the next 'future_days' prices
X_future = df.drop(['Prediction'], axis=1)[-future_days:]
forecast = model.predict(X_future)

# STEP 12: Plot the actual vs predicted prices
plt.figure(figsize=(12,6))
plt.plot(df['Close'], label='Actual Price')
plt.plot(range(len(df)-future_days, len(df)), forecast, label='Predicted Price', color='red')
plt.legend()
plt.title('Dogecoin Price Prediction')
plt.xlabel('Days')
plt.ylabel('Price (USD)')
plt.show()
