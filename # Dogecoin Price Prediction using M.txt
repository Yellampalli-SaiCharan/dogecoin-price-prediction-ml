# Dogecoin Price Prediction using Machine Learning

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load the downloaded data
df = pd.read_csv('DOGE-USD.csv')

# Keep only 'Close' column
df = df[['Close']]
df = df.dropna()

# Number of days to predict
future_days = 30

# Create target column
df['Prediction'] = df[['Close']].shift(-future_days)

# Features and labels
X = np.array(df.drop(['Prediction'], axis=1))[:-future_days]
y = np.array(df['Prediction'])[:-future_days]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Test predictions
predictions = model.predict(X_test)
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse:.4f}")

# Predict future prices
X_future = df.drop(['Prediction'], axis=1)[-future_days:]
forecast = model.predict(X_future)

# Plot the results
plt.figure(figsize=(12,6))
plt.plot(df['Close'], label='Actual Price')
plt.plot(range(len(df)-future_days, len(df)), forecast, label='Predicted Price', color='red')
plt.legend()
plt.title('Dogecoin Price Prediction')
plt.xlabel('Days')
plt.ylabel('Price (USD)')
plt.show()
